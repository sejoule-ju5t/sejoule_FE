import { Node, SourceFile } from 'typescript';
export declare type TSQueryApi = {
    <T extends Node = Node>(ast: Node | TSQueryNode<T>, selector: string): Array<TSQueryNode<T>>;
    ast(text: string, fileName?: string): SourceFile;
    match<T extends Node = Node>(ast: Node | TSQueryNode<T>, selector: TSQuerySelectorNode): Array<TSQueryNode<T>>;
    matches(node: TSQueryNode, selector: TSQuerySelectorNode, ancestry: Array<TSQueryNode>): boolean;
    parse(selector: string): TSQuerySelectorNode;
    query<T extends Node = Node>(ast: Node | TSQueryNode<T>, selector: string): Array<TSQueryNode<T>>;
};
export declare type TSQueryAttributeOperatorType = 'regexp' | 'literal' | 'type';
export declare type TSQueryAttributeOperator = (obj: any, value: any, type: TSQueryAttributeOperatorType) => boolean;
export declare type TSQueryAttributeOperators = {
    [key: string]: TSQueryAttributeOperator;
};
export declare type TSQueryMatcher = (node: TSQueryNode, selector: TSQuerySelectorNode, ancestry: Array<TSQueryNode>) => boolean;
export declare type TSQueryMatchers = {
    [key: string]: TSQueryMatcher;
};
export declare type TSQueryNode<T extends Node = Node> = T & {
    kindName: string;
    name?: string;
    text: string;
    value?: any;
};
export declare type TSQuerySelectorNode = {
    [key: string]: TSQuerySelectorNode | Array<TSQuerySelectorNode> | RegExp | boolean | number | string;
    index: TSQuerySelectorNode;
    left: TSQuerySelectorNode;
    name: string;
    operator: '=' | '!=' | '<=' | '<' | '>=' | '>';
    right: TSQuerySelectorNode;
    selectors: Array<TSQuerySelectorNode>;
    subject: boolean;
    type: TSQueryAttributeOperatorType;
    value: TSQuerySelectorNode | RegExp | number | string;
};
export declare type TSQueryTraverseOptions<T extends Node> = {
    enter: (node: TSQueryNode<T>, parent: TSQueryNode<T> | null) => void;
    leave: (node: TSQueryNode<T>, parent: TSQueryNode<T> | null) => void;
};
