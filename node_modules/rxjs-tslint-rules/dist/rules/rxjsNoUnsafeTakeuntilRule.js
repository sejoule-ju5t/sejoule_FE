"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsutils = require("tsutils");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program));
    };
    Rule.metadata = {
        description: "Disallows the application of operators after takeUntil.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-unsafe-takeuntil",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Applying operators after takeUntil is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Walker.prototype.visitCallExpression = function (node) {
        var propertyAccessExpression = node.expression;
        if (tsutils.isPropertyAccessExpression(propertyAccessExpression)) {
            var identifier = propertyAccessExpression.expression;
            if (tsutils.isIdentifier(identifier)) {
                var propertyName = propertyAccessExpression.name.getText();
                var identifierText = identifier.getText();
                var typeChecker = this.getTypeChecker();
                var type = typeChecker.getTypeAtLocation(identifier);
                if (util_1.isReferenceType(type) && util_1.couldBeType(type.target, "Observable")) {
                    switch (propertyName) {
                        case "takeUntil":
                            this.walkPatchedOperators(node, propertyAccessExpression.name);
                            break;
                        case "pipe":
                            this.walkPipedOperators(node);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        _super.prototype.visitCallExpression.call(this, node);
    };
    Walker.prototype.walkPatchedOperators = function (node, identifier) {
        var name = undefined;
        for (var parent_1 = node.parent; parent_1; parent_1 = parent_1.parent) {
            if (tsutils.isCallExpression(parent_1)) {
                if (name) {
                    if (name.getText() === "pipe") {
                        this.walkPipedOperators(parent_1, identifier);
                    }
                    else {
                        var typeChecker = this.getTypeChecker();
                        var type = typeChecker.getTypeAtLocation(parent_1);
                        if (util_1.isReferenceType(type) && util_1.couldBeType(type.target, "Observable")) {
                            this.addFailureAtNode(identifier, Rule.FAILURE_STRING);
                            return;
                        }
                    }
                }
            }
            else if (tsutils.isPropertyAccessExpression(parent_1)) {
                name = parent_1.name;
            }
            else {
                break;
            }
        }
    };
    Walker.prototype.walkPipedOperators = function (node, identifier) {
        var _this = this;
        if (identifier === void 0) { identifier = null; }
        if (identifier) {
            if (node.arguments.length > 0) {
                this.addFailureAtNode(identifier, Rule.FAILURE_STRING);
            }
        }
        else {
            node.arguments.forEach(function (arg, index) {
                if (tsutils.isCallExpression(arg)) {
                    var expression = arg.expression;
                    if (tsutils.isIdentifier(expression) && (expression.getText() === "takeUntil")) {
                        if (index < (node.arguments.length - 1)) {
                            _this.addFailureAtNode(expression, Rule.FAILURE_STRING);
                        }
                    }
                }
            });
        }
    };
    return Walker;
}(Lint.ProgramAwareRuleWalker));
