import { Observable, of } from "rxjs";
import { map } from "rxjs/operators";
import { THOUSAND } from "./constants";
import { Vertical } from "./enums";

enum Horizontal {
    Left = 1,
    Right
}

const HUNDRED = 100;
let outer: any;

of(1).pipe(map(value => outer = value)).subscribe();
                        ~~~~~                                                       [no-unsafe-scope]

of(1).pipe(map(function (value) { return outer = value; })).subscribe();
                                         ~~~~~                                      [no-unsafe-scope]

of(1).pipe(map(value => value * HUNDRED * THOUSAND)).subscribe();

of(1).pipe(tap(value => outer = value)).subscribe();

of(1).pipe(
    map(() => Horizontal.Left),
    map(() => Vertical.Up)
).subscribe();

of("1").pipe(map(value => parseInt(value, 10))).subscribe();

of(1).pipe(map(value => Math.ceil(value))).subscribe();

function piped(outer: number): Observable<number> {
    return of(1).pipe(map(value => outer + value));
}

of(1).pipe(
    mergeMap(value => of(null).pipe(
        map(() => value)
    ))
).subscribe();

class User {
    constructor(private name: string) {
        of("Hello").pipe(map(value => `${value}, ${this.name}.`)).subscribe();
                                                   ~~~~                             [no-unsafe-scope]
    }
}

[no-unsafe-scope]: Unsafe scopes are forbidden
