import { Observable } from "rxjs/Observable";
import { combineLatest } from "rxjs/observable/combineLatest";
import { of } from "rxjs/observable/of";
import { switchMap, takeUntil } from "rxjs/operators";

import "rxjs/add/operator/combineLatest";
import "rxjs/add/operator/switchMap";
import "rxjs/add/operator/takeUntil";

const a = of("a");
const b = of("b");
const c = of("c");
const d = of("d");

const e = a.takeUntil(d).switchMap(_ => b).subscribe();
            ~~~~~~~~~                                                       [no-unsafe-takeuntil]
const f = a.switchMap(_ => b).takeUntil(d).subscribe();

const g = a.takeUntil(d).combineLatest(b, c).subscribe();
            ~~~~~~~~~                                                       [no-unsafe-takeuntil]
const h = a.combineLatest(b, c).takeUntil(d).subscribe();

const i = a.takeUntil(d).pipe(s => combineLatest(s, b, c)).subscribe();
            ~~~~~~~~~                                                       [no-unsafe-takeuntil]
const j = a.pipe(s => combineLatest(s, b, c)).takeUntil(d).subscribe();

const k = a.pipe(takeUntil(d), switchMap(_ => b)).subscribe();
                 ~~~~~~~~~                                                  [no-unsafe-takeuntil]
const l = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();

const m = a.pipe(takeUntil(d), s => combineLatest(s, b, c)).subscribe();
                 ~~~~~~~~~                                                  [no-unsafe-takeuntil]
const n = a.pipe(s => combineLatest(s, b, c), takeUntil(d)).subscribe();

[no-unsafe-takeuntil]: Applying operators after takeUntil is forbidden
